/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

    タイトルシーン

  -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
class Title extends Phaser.Scene
{
  /*---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---
      コンストラクタ
    ---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---*/
  constructor()
  {
    super({ key: 'Title' });
  }
  /*---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---*/



  /*---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---
      アセットの読み込み
    ---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---*/
  preload()
  {
  }
  /*---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---*/



  /*---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---
      画面設計
    ---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---*/
  create()
  {
    const タイトル = this.add.text(
      CENTER_X,
      SCREEN_H / 4,
      "テンプレート"
    );
    タイトル.setFontSize(100);
    タイトル.setOrigin(0.5);
  }
  /*---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---*/



  /*---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---
      毎フレーム処理
    ---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---*/
  update()
  {
    always();
  }
  /*---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---*/
};

